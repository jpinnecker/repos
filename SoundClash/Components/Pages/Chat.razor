@page "/Chat"

@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IAsyncDisposable

<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (string message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection hubConnection;
    private Stack<string> messages = new Stack<string>();
    private string userInput;
    private string messageInput;


    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();


        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            string encodedMsg = $"{System.DateTime.Now.ToString("HH:mm")} - {user}: {message}";
            messages.Push(encodedMsg);
            StateHasChanged();
        });

        AuthenticationState authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        userInput = authenticationState.User.Identity.Name;

        await hubConnection.StartAsync();
    }

    Task Send() =>
    hubConnection.SendAsync("SendMessage", userInput ?? "Anonymous", messageInput);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}
